---
  - name: Provision an EC2 Instance
    hosts: local
    connection: local
    gather_facts: False
    tags: provisioning
    # Necessary Variables for creating/provisioning the EC2 Instance
    vars:
      instance_type: t2.micro
      image: ami-5e8bb23b # This is an AMI i created myself
      keypair: id_rsa # This is one of my keys that i already have in AWS
      region: us-east-2 # Change the Region
      security_group: aws_ansible
  #    count: 1
      vpc_id: vpc-0d9f8baaa99a3815b
    # Task that will be used to Launch/Create an EC2 Instance
    tasks:
      - name: Attach Internet Gateway
        ec2_vpc_igw:
          vpc_id: "{{vpc_id}}"
          state: present
          validate_certs: yes
          region: "{{region}}"
        register: igw
      - debug:
          msg: "{{igw.gateway_id}}"
      - name: Create a public subnet
        ec2_vpc_subnet:
          vpc_id: "{{vpc_id}}"
          cidr: 10.0.1.0/24
          map_public: yes
          state: present
          wait: yes 
        register: subnet
      - debug:
          msg: "{{subnet.subnet.id}}"
      
      - name: Set up Public Subnet Route Table
        ec2_vpc_route_table:
          vpc_id: "{{vpc_id}}"
          tags:
            Name: Public
          subnets:
            - "{{subnet.subnet.id}}"
          routes:
            - dest: 0.0.0.0/0
              gateway_id: "{{igw.gateway_id}}"
        register: publicrt
      - debug:
          msg: "{{publicrt.route_table.id}}"
      - name: Create NACL
        ec2_vpc_nacl:
          state: present
          vpc_id: "{{vpc_id}}"
          name: aws_ansible_nacl
          subnets: ['{{subnet.subnet.id}}']
          validate_certs: yes
          ingress: 
            - [100, 'tcp', 'allow', '0.0.0.0/0', null, null, 22, 22]
            - [200, 'tcp', 'allow', '0.0.0.0/0', null, null, 80, 80]
            - [300, 'tcp', 'allow', '0.0.0.0/0', null, null, 443, 443]
          egress:    
            - [100, 'all', 'allow', '0.0.0.0/0', null, null, null, null]

      - name: Create Security Group
        ec2_group:
          name: "{{ security_group }}"
          description: Security Group for webserver Servers
          vpc_id: "{{vpc_id}}" 
          state: present
          validate_certs: yes
          tags: {name: 'aws_ansible'}
          rules:
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 443
              to_port: 443
              cidr_ip: 0.0.0.0/0
        register: sg
      - debug:
          msg:  "{{ sg.group_id }}"


     # - name: create a keypair
       # ec2_key:
       #   name: my_key
      #    key_material: "{{ lookup('file', '/root/.ssh/id_rsa.pub')}}"
      - name: Launch the new EC2 Instance
        #local_action:
         # module: ec2
        ec2: 
          group: "{{ security_group }}"
          instance_type: "{{ instance_type}}"
          image: "{{ image }}"
          wait: true
          region: "{{ region }}"
          key_name: "{{ keypair }}"
      #   counti: "{{count}}"
          vpc_subnet_id: "{{subnet.subnet.id}}"
          state: present
          assign_public_ip: yes
        register: ec2
      - name: Add the newly created EC2 instance(s) to the local host group (located inside the directory)
        local_action:
          module: lineinfile
          dest: ~/hosts
          regexp: "{{ item.public_ip }}"
          insertafter: ['webserver']
          line: "{{ item.public_ip }}"
        with_items:
          - "{{ec2.instances}}"
      - name: Wait for SSH to come up
        local_action:
          module: wait_for
          host: "{{ item.public_ip }}"
          port: 22
          state: started
          timeout: 200
        with_items:
          - "{{ec2.instances}}"
      - name: Install a web server
        host: webserver
        apt: name=docker.io update_cache=yes state=latest
      
      - name: Add tag to Instance(s)
        local_action: {module: ec2_tag, resource: "{{ item.id }}", region: "{{ region }}", state: 'present'}
        with_items:
          - "{{ec2.instances}}"
        args:
          tags:
            Name: webserver
